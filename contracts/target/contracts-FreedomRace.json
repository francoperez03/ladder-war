{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","name":"FreedomRace","functions":[{"name":"initialize","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"players","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3151558035338938026":{"error_kind":"fmtstring","length":75,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8193989641828211937":{"error_kind":"string","string":"ciphertext length mismatch"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","get_random_bytes","field_less_than","build_msg_block","attach_len_to_msg_block","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"sabotage","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"1705275289401561847":{"error_kind":"string","string":"Mismatch note header storage slot."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3151558035338938026":{"error_kind":"fmtstring","length":75,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6869395374906889440":{"error_kind":"string","string":"Mismatch note header contract address."},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8193989641828211937":{"error_kind":"string","string":"ciphertext length mismatch"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"13107192312614724151":{"error_kind":"string","string":"Return notes not sorted in descending order."},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17381630674590689922":{"error_kind":"string","string":"Cannot sabotage yourself"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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9yti5wFF7DyoiJ2HFLHzC0XsPKyInV8qYudXith5RBE7v1bEzqOK2HlMETu/UcTO44rYeUIRO79VxM6Tith5ShE7Tyti5xlF7PxOETvPKmLn94rY+YMidp5TxM7zith5QRE7Lypi54+K2HlJETsvK2LnT4rYeUURO39WxM6rith5TRE7f1HEzuuK2HlDETtvKmLnLUXsvK2Inb8qYucdRez8TRE77ypi5z1F7PxdETvvK2LnH4rY+acidv6liJ1/K2LnA0XsfKiInY8UsfOxInY+UcTOfxSx86kidv6riJ2OhGrYmUAROxMqYmciRexMrIidSRSxM6kidiZTxM7kitiZQhE7UypiZypF7EytiJ1pFLEzrSJ2plPEzvSK2JlBETszKmJnJkXszKyInVkUsTOrInZmU8TO7IrYmUMRO3MqYmcuRezMrYideRSxM68iduZTxM78ithZQBE7CypiZyFF7CysiJ1FFLGzqCJ2FlPEzuKK2FlCETtLKmJnKUXsLK2InWUUsbOsInaWU8ROpyJ2aorY6aOInb6K2OmniJ3+itgZoIidgYrYGaSIncGK2FleETsrKGJnRUXsrKSInZUVsbOKInZWVcTOaorYWV0RO2soYmdNReyspYidtRWxs44idtZVxM56ithZXxE7GyhiZ0NF7GykiJ2NFbGziSJ2NlXEzmaK2NlcETtbKGJnS0XsbKWIna0VsbONIna2VcTOdorY2V4ROzsoYmdHRezspIidnRWxs4sidnZVxM4QRewMVcTOMEXsDFfEzghF7IxUxM5uitjZXRE7eyhi51uK2NlTETvfVsTOdxSxs5cidr6riJ29FbGzjyJ29lXEzn6K2NlfETsHKGLnQEXsHKSInYMVsfM9RewcooidQxWxc5gidg5XxM4oReyMVsROXRE7Ryhi50hF7IxRxM5YRex8XxE7Ryli5weK2DlaETvHKGLnWEXsHKeIneMVsfNDReycoIidHyli50RF7JykiJ2TFbFziiJ2TlXEzmmK2DldETtnKGLnTEXsnKWInbMVsXOOInbOVcTOeYrYOV8ROxcoYudCRexcpIidixWxc4kidi5VxM5liti5XBE7Vyhi50pF7FyliJ2rFbFzjSJ2rlXEznWK2LleETs/VsTODYrYuVEROzcpYudmRezcooidWxWxc5sidn6iiJ3bFbFzhyJ27lTE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","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","field_less_than","lte_hint","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","get_random_bytes","build_msg_block","attach_len_to_msg_block","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11091894166229312484":{"error_kind":"fmtstring","length":20,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_player_state","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17595253152434889169":{"error_kind":"string","string":"offset too large"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","brillig_names":["get_player_state"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VSwQ6CMAzdYEaHeoEfGQEDRxPv/sMC7qgHvHjj02WmzZoF4cD2kqVr2r32deXMgYMV7A/4UnAm16IAK8EmJJ5O5wq+2oZSenVD8reqruSMvoD9//h5pP4tkD/S/NUeeG6j46dasO5hOhnZiVia8c9iai5WdJ7hfmJu/4fPs7u/3o+BreBIHokxvICmVQobT4F/B/w+BInT/Bz8jAwArdjQp2l0aSpt9EX3fd3p3OO3SMicvrJHio3GBAAA","debug_symbols":"bY/RCoMwDEX/Jc99MLM666/IkKpRCqWVWgdD/PfF4YbbfLnkhpNL7gIdNfNQG9f7CcpqAetbHY137JZVQBOMtWaoj2tINkF88dOo3WanqEOEUqIAch0Piq97YwnKPF3FH6gkqh1VUuYfGDE5o7OkeNPZ5fpF31a2dx2Mbiztb/ezaw8t4mOkn0Jj8C11c6Ct2qEVa4WpwIJjOfoJ","brillig_names":["sync_notes"]},{"name":"advance","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"args_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3151558035338938026":{"error_kind":"fmtstring","length":75,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8193989641828211937":{"error_kind":"string","string":"ciphertext length mismatch"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["random","decompose_hint","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","get_random_bytes","field_less_than","lte_hint","build_msg_block","attach_len_to_msg_block","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"FreedomRace::advance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"FreedomRace::advance_parameters","fields":[{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"FreedomRace::sabotage_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"FreedomRace::sabotage_parameters","fields":[{"name":"target","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"FreedomRace::initialize_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"FreedomRace::initialize_parameters","fields":[{"name":"players","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"FreedomRace"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"player_states","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n        for i in 0..MaxLen {\n            if i >= len {\n                array[i] = zeroed;\n            }\n        }\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"17":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        /*@safety: borrow is enforced to be boolean due to its type.\n            if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n            if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n        */\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            /*@safety: decomposition is properly checked below*/\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            unsafe {\n                //@safety: already unconstrained\n                field_less_than(b, a)\n            },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety: unsafe in unconstrained\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        unsafe {\n            //@safety: Take a hint of the comparison and verify it\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            //@safety : unconstrained context\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        //@safety : xlo and xhi decomposition is checked below\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            /*@safety  : the msg_block is checked below in verify_msg_block*/\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            //@safety : the msg_block is checked below in verify_msg_block\n            build_msg_block(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        //@safety : the msg_len is checked below in verify_msg_len\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 0)\n        };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        let (msg_block, msg_byte_ptr) = unsafe {\n            //@safety : testing context\n            build_msg_block(input, input.len(), 64)\n        };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        let msg_block = unsafe {\n            //@safety  : testing context\n            attach_len_to_msg_block(input, 1, 448)\n        };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"51":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"60":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse super::convert::AsPrimitive;\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                let ascii = ascii\n                    + 32\n                        * (\n                            unsafe {\n                                /*@safety : optionally adds 32 and then check (below) the result is in 'a..f' range\n                                    This enforces that the input is in either 'A..F' or 'a..f' range\n                                */\n                                U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                            }\n                        );\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            /*@safety : euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n                Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n            */\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            //@safety : cf div() above\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            //@safety: testing context\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            //@safety: testing context\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            //@safety: testing context\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            //@safety: testing context\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            //@safety: testing context\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n}\n","path":"std/uint128.nr"},"63":{"source":"use dep::aztec::macros::aztec;\nmod test;\n#[aztec]\ncontract FreedomRace {   \n    use dep::value_note::{balance_utils, utils::{increment, decrement}, value_note::ValueNote};\n    use dep::aztec::prelude::{AztecAddress, Map, PrivateSet};\n    use dep::aztec::{\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        macros::{functions::{initializer, private}, storage::storage},\n    };\n\n    #[storage]\n    struct Storage<Context> {\n      player_states: Map<AztecAddress, PrivateSet<ValueNote, Context>, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn initialize(players: [AztecAddress; 3]) {\n      for player in players {\n          let mut initial_note = ValueNote::new(0, player);\n          storage.player_states\n              .at(player)\n              .insert(&mut initial_note)\n              .emit(encode_and_encrypt_note(\n                  &mut context,\n                  player,\n                  context.msg_sender(),\n              ));\n      }\n    }\n\n    #[private]\n    fn advance(target: AztecAddress) {\n        let sender = context.msg_sender();\n        increment(storage.player_states.at(target), 1, sender, sender);\n    }\n\n    #[private]\n    fn sabotage(target: AztecAddress) {\n        let sender = context.msg_sender();\n        assert(sender != target, \"Cannot sabotage yourself\");\n        decrement(storage.player_states.at(target), 1, target, sender);\n    }\n\n    unconstrained fn get_player_state(player: AztecAddress) -> pub Field {\n        let player_states = storage.player_states;\n        balance_utils::get_balance(player_states.at(player))\n    }\n\n    use dep::aztec::note::note_getter::{MAX_NOTES_PER_PAGE, view_notes};\n    use dep::aztec::note::note_viewer_options::NoteViewerOptions;\n    use dep::aztec::protocol_types::storage::map::derive_storage_slot_in_map;\n    use crate::test;\n\n    #[test]\n    unconstrained fn test_deploy_contract_initializes_player_states() {\n        let (env, game_contract_address, alice) = test::setup();\n        env.impersonate(game_contract_address);\n        let initial_value = 0;\n        let player_states_slot = FreedomRace::storage_layout().player_states.slot;\n        let alice_slot = derive_storage_slot_in_map(player_states_slot, alice);\n\n        let mut options = NoteViewerOptions::new();\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(alice_slot, options);\n        let initial_note_value = notes.get(0).value;\n        assert(\n            initial_value == initial_note_value,\n            \"Expected initial_value to match initial_note_value\"\n        );\n    }\n\n    #[test]\n    unconstrained fn test_advance_increments_player_state() {\n        let (env, game_contract_address, alice, _bob, _carlo) = test::setup();\n        env.impersonate(game_contract_address);\n\n        let player_states_slot = FreedomRace::storage_layout().player_states.slot;\n        let alice_slot = derive_storage_slot_in_map(player_states_slot, alice);\n\n        let mut options = NoteViewerOptions::new();\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(alice_slot, options);\n        let initial_note_value = notes.get(0).value;\n\n        assert(\n            initial_note_value == 0,\n            \"Expected Alice's initial value to be 0\",\n        );\n        env.impersonate(alice);\n\n        FreedomRace::at(game_contract_address).advance(alice).call(&mut env.private());\n        env.impersonate(game_contract_address);\n\n        let current_alice_state = get_player_state(alice);\n        let expected_current_value = initial_note_value + 1;\n        assert(\n            expected_current_value == current_alice_state,\n            f\"Expected {expected_current_value} but got {current_alice_state}\",\n        );\n    }\n    #[test]\n    unconstrained fn test_sabotage_decrements_target_player_state() {\n        let current_alice_state = 0;\n        let expected_current_value =  0;\n        assert(\n            expected_current_value == current_alice_state,\n            f\"Expected {expected_current_value} but got {current_alice_state}\",\n        );\n    }\n}\n\n\n\n\n","path":"/Users/francoperez/repos/zk/ladder-war/contracts/src/main.nr"},"69":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"70":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(array::subarray(serialized_note, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"72":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"75":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"76":{"source":"use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"84":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"86":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        key_validation_request::get_key_validation_request,\n        returns::pack_returns,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert(request.pk_m.hash() == pk_m_hash);\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // The oracle simulates the private call and returns the value of the side effects counter after execution of\n        // the call (which means that end_side_effect_counter - start_side_effect_counter is the number of side effects\n        // that took place), along with the hash of the return values. We validate these by requesting a private kernel\n        // iteration in which the return values are constrained to hash to `returns_hash` and the side effects counter\n        // to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"90":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    point::Point,\n    public_keys::{IvpkM, ToPoint},\n    scalar::Scalar,\n};\n\nuse crate::keys::secret_derivation::derive_aes_secret;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    pub fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    pub fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = derive_aes_secret(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"91":{"source":"use crate::{\n    context::PrivateContext,\n    encrypted_logs::payload::compute_private_log_payload,\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\n\n/// Computes private note log payload\nfn compute_payload<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> ([Field; PRIVATE_LOG_SIZE_IN_FIELDS], u32)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n\n    let payload = compute_private_log_payload(contract_address, recipient, sender, plaintext);\n\n    (payload, note_hash_counter)\n}\n\nunconstrained fn compute_payload_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> ([Field; PRIVATE_LOG_SIZE_IN_FIELDS], u32)\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_payload(context, note, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let (encrypted_log, note_hash_counter) =\n            compute_payload(*context, e.note, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let (encrypted_log, note_hash_counter) =\n            unsafe { compute_payload_unconstrained(*context, e.note, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"93":{"source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::poseidon2_hash,\n    point::Point,\n    public_keys::AddressPoint,\n    scalar::Scalar,\n    utils::arrays::array_concat,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    field::bn254::decompose, hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse crate::{\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::secret_derivation::derive_aes_secret,\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::bytes_to_fields, point::point_to_bytes},\n};\n\n// 1 field is reserved for tag.\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n\ncomptime global HEADER_SIZE: u32 = 48;\n\n// Bytes padded to the overhead, so that the size of the incoming body ciphertext will be a multiple of 16.\ncomptime global OVERHEAD_PADDING: u32 = 15;\n\npub comptime global OVERHEAD_SIZE: u32 = 32 /* eph_pk */\n    + HEADER_SIZE /* incoming_header */\n    + OVERHEAD_PADDING /* padding */;\n\nglobal PLAINTEXT_LENGTH_SIZE: u32 = 2;\n\n// This is enough for 8 fields of data.\n// 1 field for storage slot, 1 field for note/event type id, allowing 6 fields for custom values.\nglobal MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\n// Note: Might have to update PRIVATE_LOG_SIZE_IN_FIELDS in `constants.nr` if the above changes.\n// This value ideally should be set by the protocol, allowing users (or `aztec-nr`) to fit data within the defined size limits.\n// Currently, we adjust this value as the structure changes, then update `constants.nr` to match.\n// Once the structure is finalized with defined overhead and max note field sizes, this value will be fixed and should remain unaffected by further payload composition changes.\n\npub fn compute_private_log_payload<let P: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n    assert(\n        P < MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,\n        f\"plaintext for log must not exceed {MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES}\",\n    );\n\n    let extended_plaintext: [u8; MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES + PLAINTEXT_LENGTH_SIZE] =\n        extend_private_log_plaintext(plaintext);\n    let encrypted: [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] =\n        compute_encrypted_log(contract_address, recipient, extended_plaintext);\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    array_concat([tag], bytes_to_fields(encrypted))\n}\n\npub fn compute_partial_public_log_payload<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let extended_plaintext: [u8; P + PLAINTEXT_LENGTH_SIZE] =\n        extend_private_log_plaintext(plaintext);\n    let encrypted: [u8; M - 32] =\n        compute_encrypted_log(contract_address, recipient, extended_plaintext);\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    // TODO(#10273) This should be done by the AVM when it's processing the raw logs instead of their hashes.\n    let siloed_tag_bytes: [u8; 32] =\n        poseidon2_hash([contract_address.to_field(), tag]).to_be_bytes();\n\n    // Temporary hack so that the partial public log remains the same format.\n    // It should return field array and make the tag the first field as compute_private_log_payload does.\n    let mut log_bytes = [0; M];\n    for i in 0..32 {\n        log_bytes[i] = siloed_tag_bytes[i];\n    }\n    for i in 0..encrypted.len() {\n        log_bytes[i + 32] = encrypted[i];\n    }\n\n    log_bytes\n}\n\nfn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] =\n        header.compute_ciphertext(eph_sk, recipient.to_address_point());\n    let incoming_body_ciphertext =\n        compute_incoming_body_ciphertext(plaintext, eph_sk, recipient.to_address_point());\n\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // eph_pk\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[offset + i] = eph_pk_bytes[i];\n    }\n    offset += 32;\n\n    // incoming_header\n    for i in 0..HEADER_SIZE {\n        encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n    }\n    offset += HEADER_SIZE;\n\n    // Padding.\n    offset += OVERHEAD_PADDING;\n\n    // incoming_body\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - offset;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n    }\n\n    encrypted_bytes\n}\n\n// Prepend the plaintext length as the first byte, then copy the plaintext itself starting from the second byte.\n// Fill the remaining bytes with random values to reach a fixed length of N.\nfn extend_private_log_plaintext<let P: u32, let N: u32>(plaintext: [u8; P]) -> [u8; N] {\n    let mut padded = unsafe { get_random_bytes() };\n    padded[0] = (P >> 8) as u8;\n    padded[1] = P as u8;\n    for i in 0..P {\n        padded[i + PLAINTEXT_LENGTH_SIZE] = plaintext[i];\n    }\n    padded\n}\n\nunconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    address_point: AddressPoint,\n) -> [u8] {\n    let full_key = derive_aes_secret(eph_sk, address_point.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_incoming_body_ciphertext, compute_private_log_payload,\n        MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES,\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use protocol_types::public_keys::AddressPoint;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(\n            (MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES as u64 + 1 + 30) / 31,\n        );\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = compute_private_log_payload(contract_address, recipient, sender, plaintext);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x008d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701f,\n            0x00a70577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,\n            0x003de818923f85187871d99bdf95d695eff0a900000000000000000000000000,\n            0x000000a600a61f7d59eeaf52eb51bc0592ff981d9ba3ea8e6ea8ba9dc0cec8c7,\n            0x000b81e84556a77ce6c3ca47a527f99ffe7b2524bb885a23020b7295748ad19c,\n            0x001083618ad96298b76ee07eb1a56d19cc798710e9f5de96501bd59b3781c9c0,\n            0x002a6c95c5912f8936b1500d362afbf0922c85b1ada18db8b95162a6e9d06765,\n            0x005cdf669eb387f8e0492a95fdcdb39429d5340b4bebc250ba9bf62c2f49f549,\n            0x00f37beed75a668aa51967e0e57547e5a655157bcf381e22f30e25881548ec96,\n            0x0006a151b5fbfb2d14ee4b34bf4c1dbd71c7be15ad4c63474bb6f89970aeb3d9,\n            0x00489c8edbdff80a1a3a5c28370e534abc870a85ea4318326ea19222fb10df35,\n            0x008c765edada497db4284ae30507a2e03e983d23cfa0bd831577e857bbef9cf7,\n            0x0090c97cb5699cc8783a1b4276d929be2882e5b9b72829a4f8404f7e3c853d11,\n            0x00d6d5a000b80134891e95f81007ad35d3945eaeecbe137fff85d01d7eaf8f19,\n            0x00a15eb965c6a4bc97aa87fd3463c31c9d4e0d722a8ba870bcc50c9c7a8b48ad,\n            0x0063c861bdbe490d44c57382decbae663927909652f87ac18dcfd5b30649cce5,\n            0x00820f14caa725efe1fa3485ceac88499eadf0565c5b20998c05931bbf478e68,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let address_point = AddressPoint {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `address_point` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, address_point);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"105":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"107":{"source":"use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"109":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"110":{"source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::deserialize_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"112":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"120":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    let (member, exists) = get_contract_instance_deployer_internal_avm(address);\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    let (member, exists) = get_contract_instance_class_id_internal_avm(address);\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    let (member, exists) = get_contract_instance_initialization_hash_internal_avm(address);\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"125":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"126":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must be large enough to hold all of\n/// the elements past `offset`.\n///\n/// Example:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n/// ```\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"129":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"148":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"149":{"source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"150":{"source":"use dep::protocol_types::point::Point;\n\n// A set of generators generated with `derive_generators(...)` function from noir::std\npub global Ga1: Point = Point {\n    x: 0x30426e64aee30e998c13c8ceecda3a77807dbead52bc2f3bf0eae851b4b710c1,\n    y: 0x113156a068f603023240c96b4da5474667db3b8711c521c748212a15bc034ea6,\n    is_infinite: false,\n};\npub global Ga2: Point = Point {\n    x: 0x2825c79cc6a5cbbeef7d6a8f1b6a12b312aa338440aefeb4396148c89147c049,\n    y: 0x129bfd1da54b7062d6b544e7e36b90736350f6fba01228c41c72099509f5701e,\n    is_infinite: false,\n};\npub global Ga3: Point = Point {\n    x: 0x0edb1e293c3ce91bfc04e3ceaa50d2c541fa9d091c72eb403efb1cfa2cb3357f,\n    y: 0x1341d675fa030ece3113ad53ca34fd13b19b6e9762046734f414824c4d6ade35,\n    is_infinite: false,\n};\npub global Ga4: Point = Point {\n    x: 0x0e0dad2250583f2a9f0acb04ededf1701b85b0393cae753fe7e14b88af81cb52,\n    y: 0x0973b02c5caac339ee4ad5dab51329920f7bf1b6a07e1dabe5df67040b300962,\n    is_infinite: false,\n};\npub global Ga5: Point = Point {\n    x: 0x2f3342e900e8c488a28931aae68970738fdc68afde2910de7b320c00c902087d,\n    y: 0x1bf958dc63cb09d59230603a0269ae86d6f92494da244910351f1132df20fc08,\n    is_infinite: false,\n};\n// If you change this update `G_SLOT` in `yarn-project/simulator/src/client/test_utils.ts` as well\npub global G_slot: Point = Point {\n    x: 0x041223147b680850dc82e8a55a952d4df20256fe0593d949a9541ca00f0abf15,\n    y: 0x0a8c72e60d0e60f5d804549d48f3044d06140b98ed717a9b532af630c1530791,\n    is_infinite: false,\n};\n\nmod test {\n    use crate::generators::{G_slot, Ga1, Ga2, Ga3, Ga4, Ga5};\n    use dep::protocol_types::point::Point;\n    use std::hash::derive_generators;\n\n    #[test]\n    unconstrained fn test_generators() {\n        let generators: [Point; 6] = derive_generators(\"aztec_nr_generators\".as_bytes(), 0);\n        assert_eq(generators[0], Ga1);\n        assert_eq(generators[1], Ga2);\n        assert_eq(generators[2], Ga3);\n        assert_eq(generators[4], Ga4);\n        assert_eq(generators[5], Ga5);\n        assert_eq(generators[3], G_slot);\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/generators.nr"},"153":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"154":{"source":"use crate::utils::point::point_to_bytes;\nuse dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, point::Point, scalar::Scalar};\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::sha256};\n\npub fn derive_aes_secret(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret = point_to_bytes(multi_scalar_mul([point], [secret]));\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret[i];\n    }\n\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/10537): Replace use of sha256\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_derive_aes_secret_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = derive_aes_secret(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/keys/secret_derivation.nr"},"161":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    storage::map::derive_storage_slot_in_map,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"171":{"source":"use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest,\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::{Deserialize, Serialize},\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PrivateSet<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"207":{"source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"244":{"source":"use crate::traits::{Deserialize, Serialize};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"271":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 2);\n}\n\n#[test]\nfn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = unsafe { find_index_hint(values, |v: Field| min.lt(v)) };\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concated = array_concat(array0, array1);\n    assert_eq(concated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"290":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"296":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"297":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"299":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"300":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"304":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"305":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"306":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::scoped::Scoped,\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::{arrays::array_concat, field::field_from_bytes};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    tx_hash: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> std::hash::poseidon2::Poseidon2 {\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: std::hash::poseidon2::Poseidon2,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> std::hash::poseidon2::Poseidon2 {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: std::hash::poseidon2::Poseidon2,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> std::hash::poseidon2::Poseidon2 {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let two_pow_64 = 18446744073709551616;\n    let empty_sponge = std::hash::poseidon2::Poseidon2::new((in_len as Field) * two_pow_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut contructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(contructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == contructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"307":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"316":{"source":"// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n","path":"/Users/francoperez/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr"},"323":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UnconstrainedContext, note::note_viewer_options::NoteViewerOptions,\n    state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UnconstrainedContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UnconstrainedContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value;\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"324":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::protocol_types::constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL;\n\npub fn filter_notes_min_sum(\n    notes: [Option<ValueNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<ValueNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = U128::from_integer(0);\n    for i in 0..notes.len() {\n        if notes[i].is_some() & (sum < U128::from_integer(min_sum)) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum += U128::from_integer(note.value);\n        }\n    }\n\n    selected\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/value-note/src/filter.nr"},"325":{"source":"use crate::{filter::filter_notes_min_sum, value_note::{VALUE_NOTE_LEN, ValueNote}};\nuse dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\nuse dep::aztec::note::note_getter_options::SortOrder;\nuse dep::aztec::prelude::{AztecAddress, NoteGetterOptions, PrivateContext, PrivateSet};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\npub fn create_note_getter_options_for_decreasing_balance(\n    amount: Field,\n) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(\n        ValueNote::properties().value,\n        SortOrder.DESC,\n    )\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\npub fn increment(\n    // docs:start:increment_args\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    recipient: AztecAddress, // docs:end:increment_args\n    sender: AztecAddress,\n) {\n    let mut note = ValueNote::new(amount, recipient);\n    // Insert the new note to the owner's set of notes and emit the log if value is non-zero.\n    balance.insert(&mut note).emit(encode_and_encrypt_note(balance.context, recipient, sender));\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\npub fn decrement(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    owner: AztecAddress,\n    sender: AztecAddress,\n) {\n    let sum = decrement_by_at_most(balance, amount, owner, sender);\n    assert(sum == amount, \"Balance too low\");\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\npub fn decrement_by_at_most(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    max_amount: Field,\n    owner: AztecAddress,\n    sender: AztecAddress,\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let notes = balance.pop_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            decremented += note.value;\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if max_amount.lt(decremented) {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner, sender);\n\n    decremented\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/value-note/src/utils.nr"},"326":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.69.1/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}